
// visualizer.js

/**
 * Recursively renders the minimax search tree as an HTML unordered list.
 * @param {object} node - The root node of the tree to render.
 * @returns {string} - The HTML string for the tree.
 */
function renderMinimaxTree(node, parentNode = null) {
    if (!node) {
        return '';
    }

    let childrenHtml = '';
    if (node.children && node.children.length > 0) {
        childrenHtml = '<ul>';
        for (const child of node.children) {
            childrenHtml += renderMinimaxTree(child, node); // Pass current node as parent
        }
        childrenHtml += '</ul>';
    }

    let classList = '';
    if (node.pruned) {
        classList += 'pruned ';
    }
    if (node.isMaximizing) {
        classList += 'max-node ';
    } else {
        classList += 'min-node ';
    }

    const formatNumber = (value) => {
        if (value === undefined || value === null) return 'N/A';
        if (value === Infinity) return '&infin;';
        if (value === -Infinity) return '-&infin;';
        return value.toFixed(2);
    };

    let parentMoveInfo = parentNode && parentNode.move ? `Parent: (${parentNode.move.r}, ${parentNode.move.c})` : '';
    let moveInfo = node.move ? `Move: (${node.move.r}, ${node.move.c})` : 'Initial';
    let scoreInfo = `Score: ${formatNumber(node.score)}`;
    let alphaBetaInfo = `&alpha;: ${formatNumber(node.alpha)}, &beta;: ${formatNumber(node.beta)}`;

    return `<li class="${classList}">
                <div class="node-content">
                    <span>${parentMoveInfo}</span>
                    <span>${moveInfo}</span>
                    <span>${scoreInfo}</span>
                    <span>${alphaBetaInfo}</span>
                </div>
                ${childrenHtml}
            </li>`;
}

/**
 * Main function to display the tree in the DOM.
 * @param {object} treeData - The tree data generated by the AI.
 */
function displayTree(treeData) {
    const container = document.getElementById('minimax-visualization');
    if (container) {
        if (!treeData) {
            container.innerHTML = '';
            return;
        }
        const treeHtml = `<ul>${renderMinimaxTree(treeData)}</ul>`;
        container.innerHTML = `<div class="tree-container">${treeHtml}</div>`;
    }
}
